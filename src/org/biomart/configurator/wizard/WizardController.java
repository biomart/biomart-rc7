package org.biomart.configurator.wizard;

import java.awt.event.*;

/**
 * This class is responsible for reacting to events generated by pushing any of the
 * three buttons, 'Next', 'Previous', and 'Cancel.' Based on what button is pressed,
 * the controller will update the model to show a new panel and reset the state of
 * the buttons as necessary.
 */
public class WizardController implements ActionListener {
    
    private Wizard wizard;
    
    /**
     * This constructor accepts a reference to the Wizard component that created it,
     * which it uses to update the button components and access the WizardModel.
     * @param w A callback to the Wizard component that created this controller.
     */    
    public WizardController(Wizard w) {
        wizard = w;
    }

    /**
     * Calling method for the action listener interface. This class listens for actions
     * performed by the buttons in the Wizard class, and calls methods below to determine
     * the correct course of action.
     * @param evt The ActionEvent that occurred.
     */    
    public void actionPerformed(java.awt.event.ActionEvent evt) {        
        if (evt.getActionCommand().equals(Wizard.CANCEL_BUTTON_ACTION_COMMAND))
            cancelButtonPressed();
        else if (evt.getActionCommand().equals(Wizard.BACK_BUTTON_ACTION_COMMAND))
            backButtonPressed();
        else if (evt.getActionCommand().equals(Wizard.NEXT_BUTTON_ACTION_COMMAND))
            nextButtonPressed();
        else if(evt.getActionCommand().equals(Wizard.FINISH_BUTTON_ACTION_COMMAND)) 
        	finishButtonPressed();
        
    }
    
    private void finishButtonPressed() {
        WizardModel model = wizard.getModel();
        WizardPanel panel = model.getCurrentPanel();
        if(!panel.validateWizard()) {
        	return;
        }
        panel.saveWizardState();
        wizard.close(Wizard.FINISH_RETURN_CODE);
    }
    
    private void cancelButtonPressed() {
        
        wizard.close(Wizard.CANCEL_RETURN_CODE);
    }

    private void nextButtonPressed() { 
        WizardModel model = wizard.getModel();
        WizardPanel panel = model.getCurrentPanel();
        if(!panel.validateWizard()) {
        	return;
        }
        panel.saveWizardState();
        //  If it is a finishable panel, close down the dialog. Otherwise,
        //  get the ID that the current panel identifies as the next panel,
        //  and display it.
        
        Object nextPanel = panel.getNextPanelId();
              
        wizard.setCurrentPanel(nextPanel,true);        
    }

    private void backButtonPressed() {
 
        WizardModel model = wizard.getModel();
        WizardPanel panel = model.getCurrentPanel();
        panel.backClear();
 
        //  Get the descriptor that the current panel identifies as the previous
        //  panel, and display it.
        
        Object backPanel = panel.getBackPanelId();        
        wizard.setCurrentPanel(backPanel,false);
        
    }

    
    void resetBackButtonToPanelRules() {
    
        //  Reset the buttons to support the original panel rules,
        //  including whether the next or back buttons are enabled or
        //  disabled, or if the panel is finishable.
        
        WizardModel model = wizard.getModel();
        WizardPanel panel = model.getCurrentPanel();

        
        if (panel.getBackPanelId() != null)
            model.setBackButtonEnabled(Boolean.TRUE);
        else
            model.setBackButtonEnabled(Boolean.FALSE);

/*        //  If the panel in question has one or more panels in front of it,
        //  enable the next button. Otherwise, disable it.
 
        if (panel.getNextPanelId() != null)
            model.setNextButtonEnabled(Boolean.TRUE);
        else
            model.setNextButtonEnabled(Boolean.FALSE);
 
        wizard.setFinishButtonEnabled(panel.isFinalPanel());
        */
        
    }
    
}
